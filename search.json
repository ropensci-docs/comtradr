[{"path":"https://docs.ropensci.org/comtradr/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://docs.ropensci.org/comtradr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to comtradr","title":"Contributing to comtradr","text":"outlines propose change comtradr. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://docs.ropensci.org/comtradr/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to comtradr","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ‚Äôll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://docs.ropensci.org/comtradr/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to comtradr","text":"want make bigger change, ‚Äôs good idea first file issue make sure someone team agrees ‚Äôs needed. ‚Äôve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://docs.ropensci.org/comtradr/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to comtradr","text":"Fork package clone onto computer. haven‚Äôt done , recommend using usethis::create_from_github(\"ropensci/comtradr\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn‚Äôt pass cleanly, ‚Äôs good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e.¬†just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://docs.ropensci.org/comtradr/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to comtradr","text":"New code follow tidyverse style guide. can use styler package apply styles, please don‚Äôt restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://docs.ropensci.org/comtradr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to comtradr","text":"Please note comtradr project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/caching.html","id":"caching-requests-from-the-un-comtrade-api","dir":"Articles","previous_headings":"","what":"Caching requests from the UN Comtrade API","title":"Caching requests from the UN Comtrade API","text":"four reasons might want use caching requests UN Comtrade API: UN Comtrade API times can bit slow üêå Free users limited amount requests üí∏ might want insulate analysis updates official data üì¶ saves energy climate friendly repeat requests return data every time. üåç package offers caching option, fairly easy use.","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/caching.html","id":"the-basics-of-caching","dir":"Articles","previous_headings":"Caching requests from the UN Comtrade API","what":"The basics of caching üíΩ","title":"Caching requests from the UN Comtrade API","text":"set respective argument TRUE, directory named comtradr set cache directory. determined rappdirs::user_cache_dir function. default values cache used cachem::cache_disk. See : https://cachem.r-lib.org/reference/cache_disk.html : https://rappdirs.r-lib.org/reference/user_cache_dir.html want modify parameters, need set environment variables. can use usethis::edit_r_environ(scope = 'project) function set current project. ‚ÑπÔ∏è Restart R Session setting environment variables! üí° parameters : COMTRADR_CACHE_MAX_SIZE = Maximum size cache, bytes. cache exceeds size, cached objects removed according value evict. Use Inf size limit. default 1 gigabyte. COMTRADR_CACHE_MAX_AGE = Maximum age files cache evicted, seconds. Use Inf age limit. COMTRADR_CACHE_MAX_N = Maximum number objects cache. number objects exceeds value, cached objects removed according value evict. Use Inf limit number items. R_USER_CACHE_DIR = Directory cached files saved. See details pruning functions cachem: https://cachem.r-lib.org/reference/cache_disk.html","code":"library(comtradr) #### Now q <- ct_get_data(reporter = \"USA\",                 partner = c(\"DEU\", \"FRA\", \"JPN\", \"MEX\"),                 flow_direction = \"import\",                start_date = 2020,                end_date = 2023,                cache = TRUE) # <----- set this argument to TRUE"},{"path":"https://docs.ropensci.org/comtradr/articles/caching.html","id":"careful-with-outdated-data","dir":"Articles","previous_headings":"Caching requests from the UN Comtrade API","what":"Careful with outdated data! ‚ö†Ô∏è","title":"Caching requests from the UN Comtrade API","text":"current default cache age set Inf, hence requested data , never de downloaded . recent data, can bad idea, United Nations might update data work outdated data. recommended way set COMTRADR_CACHE_MAX_AGE environment variable described . E.g.: 60*60*24*365 one year. find cache empty , can :","code":"## to delete all files in your cache rappdirs::user_cache_dir('comtradr') |>    list.files(full.names = T) |>    file.remove()"},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"data-availability","dir":"Articles","previous_headings":"","what":"Data availability","title":"comtradr","text":"See overview available commodity classifications.","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"package-information","dir":"Articles","previous_headings":"","what":"Package information","title":"comtradr","text":"API wrapper UN Comtrade Database. UN Comtrade provides historical data weights value specific goods shipped countries, info can found . Full API documentation can found .","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"install-and-load-comtradr","dir":"Articles","previous_headings":"","what":"Install and load comtradr","title":"comtradr","text":"Install development version GitHub: Load comtradr","code":"install.packages(\"comtradr\") library(comtradr)"},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"authentication","dir":"Articles","previous_headings":"","what":"Authentication üîê","title":"comtradr","text":"discouraged complicated access token - can ! üí™ stated , need API token, see FAQ Comtrade details obtain : ‚û°Ô∏è https://unstats.un.org/wiki/display/comtrade/New+Comtrade+User+Guide#NewComtradeUserGuide-UNComtradeAPIManagement need follow detailed explanations, include screenshots, Wiki Comtrade letter. ‚òùÔ∏è writing , might updated regularly. However, signed , select comtrade - v1 product, free API.","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"storing-the-api-key","dir":"Articles","previous_headings":"Authentication üîê","what":"Storing the API key","title":"comtradr","text":"interactive session, can call following function save API token environment file current session. interactive session, can register token session using following base-r function. like set comtrade key permanently, recommend editing project .Renviron file, need add line COMTRADE_PRIMARY = xxxx--key-xxxx. ‚ÑπÔ∏è forget line break last entry. easiest taking advantage great usethis package.","code":"library(comtradr)  set_primary_comtrade_key() Sys.setenv('COMTRADE_PRIMARY' = 'xxxxxxxxxxxxxxxxx') usethis::edit_r_environ(scope = 'project')"},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"making-api-calls","dir":"Articles","previous_headings":"","what":"Making API calls","title":"comtradr","text":"Lets say want get data total imports United States Germany, France, Japan, Mexico, last five years. API calls return tidy data frame. examples show different parameter options: default, return data yearly amounts. can pass \"monthly\" arg freq return data monthly amounts, however API limits ‚Äúmonthly‚Äù query single year. Countries passed parameters reporters partners must spelled appear official ISO 3 character code convention. Search trade related specific commodities (say, tomatoes). can query Comtrade commodity reference table see different commodity descriptions available tomatoes. want search shipment data commodity descriptions listed, can simply adjust parameters ct_commodity_lookup return codes, can passed along ct_search. hand, wanted exclude juices sauces search, can pass vector relevant codes API call.","code":"example_1 <- ct_get_data(   reporter = 'USA',   partner = c('DEU', 'FRA','JPN','MEX'),   commodity_code = 'TOTAL',   start_date = 2018,   end_date = 2023,   flow_direction = 'import' ) str(example_1) #> 'data.frame':    20 obs. of  47 variables: #>  $ type_code                 : chr  \"C\" \"C\" \"C\" \"C\" ... #>  $ freq_code                 : chr  \"A\" \"A\" \"A\" \"A\" ... #>  $ ref_period_id             : int  20180101 20180101 20180101 20180101 20190101 20190101 20190101 20190101 20200101 20200101 ... #>  $ ref_year                  : int  2018 2018 2018 2018 2019 2019 2019 2019 2020 2020 ... #>  $ ref_month                 : int  52 52 52 52 52 52 52 52 52 52 ... #>  $ period                    : chr  \"2018\" \"2018\" \"2018\" \"2018\" ... #>  $ reporter_code             : int  842 842 842 842 842 842 842 842 842 842 ... #>  $ reporter_iso              : chr  \"USA\" \"USA\" \"USA\" \"USA\" ... #>  $ reporter_desc             : chr  \"USA\" \"USA\" \"USA\" \"USA\" ... #>  $ flow_code                 : chr  \"M\" \"M\" \"M\" \"M\" ... #>  $ flow_desc                 : chr  \"Import\" \"Import\" \"Import\" \"Import\" ... #>  $ partner_code              : int  251 276 392 484 251 276 392 484 251 276 ... #>  $ partner_iso               : chr  \"FRA\" \"DEU\" \"JPN\" \"MEX\" ... #>  $ partner_desc              : chr  \"France\" \"Germany\" \"Japan\" \"Mexico\" ... #>  $ partner2code              : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ partner2iso               : chr  \"W00\" \"W00\" \"W00\" \"W00\" ... #>  $ partner2desc              : chr  \"World\" \"World\" \"World\" \"World\" ... #>  $ classification_code       : chr  \"H5\" \"H5\" \"H5\" \"H5\" ... #>  $ classification_search_code: chr  \"HS\" \"HS\" \"HS\" \"HS\" ... #>  $ is_original_classification: logi  TRUE TRUE TRUE TRUE TRUE TRUE ... #>  $ cmd_code                  : chr  \"TOTAL\" \"TOTAL\" \"TOTAL\" \"TOTAL\" ... #>  $ cmd_desc                  : chr  \"All Commodities\" \"All Commodities\" \"All Commodities\" \"All Commodities\" ... #>  $ aggr_level                : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ is_leaf                   : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ customs_code              : chr  \"C00\" \"C00\" \"C00\" \"C00\" ... #>  $ customs_desc              : chr  \"TOTAL CPC\" \"TOTAL CPC\" \"TOTAL CPC\" \"TOTAL CPC\" ... #>  $ mos_code                  : chr  \"0\" \"0\" \"0\" \"0\" ... #>  $ mot_code                  : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ mot_desc                  : chr  \"TOTAL MOT\" \"TOTAL MOT\" \"TOTAL MOT\" \"TOTAL MOT\" ... #>  $ qty_unit_code             : int  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 ... #>  $ qty_unit_abbr             : chr  \"N/A\" \"N/A\" \"N/A\" \"N/A\" ... #>  $ qty                       : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ is_qty_estimated          : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ alt_qty_unit_code         : int  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 ... #>  $ alt_qty_unit_abbr         : chr  \"N/A\" \"N/A\" \"N/A\" \"N/A\" ... #>  $ alt_qty                   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ is_alt_qty_estimated      : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ net_wgt                   : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ is_net_wgt_estimated      : logi  TRUE TRUE TRUE TRUE TRUE TRUE ... #>  $ gross_wgt                 : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ is_gross_wgt_estimated    : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ cifvalue                  : num  5.36e+10 1.28e+11 1.46e+11 3.49e+11 5.85e+10 ... #>  $ fobvalue                  : num  0.00 0.00 0.00 0.00 5.75e+10 ... #>  $ primary_value             : num  5.36e+10 1.28e+11 1.46e+11 3.49e+11 5.85e+10 ... #>  $ legacy_estimation_flag    : int  4 4 4 4 4 4 4 4 4 4 ... #>  $ is_reported               : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ is_aggregate              : logi  TRUE TRUE TRUE TRUE TRUE TRUE ... #>  - attr(*, \"url\")= chr \"https://comtradeapi.un.org/data/v1/get/C/A/HS?cmdCode=TOTAL&flowCode=M&partnerCode=280%2C251%2C276%2C392%2C250%\"| __truncated__ #>  - attr(*, \"time\")= POSIXct[1:1], format: \"2023-06-27 22:26:56\" # all monthly data for a single year (API max of 12 months per call). q <- ct_search(reporters = \"USA\",                partners = c(\"Germany\", \"France\", \"Japan\", \"Mexico\"),                flow_direction = \"import\",                start_date = 2012,                end_date = 2012,                freq = \"monthly\")  # monthly data for specific span of months (API max of twelve months per call). q <- ct_search(reporters = \"USA\",                partners = c(\"Germany\", \"France\", \"Japan\", \"Mexico\"),                flow_direction = \"import\",                start_date = \"2012-03\",                end_date = \"2012-07\",                freq = \"monthly\") ct_commodity_lookup(\"tomato\") #> $tomato #> [1] \"0702 - Tomatoes; fresh or chilled\"                                                                                                          #> [2] \"070200 - Vegetables; tomatoes, fresh or chilled\"                                                                                            #> [3] \"2002 - Tomatoes; prepared or preserved otherwise than by vinegar or acetic acid\"                                                            #> [4] \"200210 - Vegetable preparations; tomatoes, whole or in pieces, prepared or preserved otherwise than by vinegar or acetic acid\"              #> [5] \"200290 - Vegetable preparations; tomatoes, (other than whole or in pieces), prepared or preserved otherwise than by vinegar or acetic acid\" #> [6] \"200950 - Juice; tomato, unfermented, not containing added spirit, whether or not containing added sugar or other sweetening matter\"         #> [7] \"210320 - Sauces; tomato ketchup and other tomato sauces\" tomato_codes <- ct_commodity_lookup(\"tomato\",                                     return_code = TRUE,                                     return_char = TRUE)  q <- ct_get_data(   reporter = 'USA',   partner = c('DEU', 'FRA','JPN','MEX'),   commodity_code = tomato_codes,   start_date = \"2012\",   end_date = \"2013\",   flow_direction = 'import' ) q <- ct_get_data(   reporter = 'USA',   partner = c('DEU', 'FRA','JPN','MEX'),   commodity_code  = c(\"0702\", \"070200\", \"2002\", \"200210\", \"200290\"),   start_date = \"2012\",   end_date = \"2013\",   flow_direction = 'import' )"},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"api-search-metadata","dir":"Articles","previous_headings":"","what":"API search metadata","title":"comtradr","text":"addition trade data, API return object contains metadata attributes.","code":"# The url of the API call. attributes(q)$url #> NULL # The date-time of the API call. attributes(q)$time #> NULL"},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"more-on-the-lookup-functions","dir":"Articles","previous_headings":"","what":"More on the lookup functions","title":"comtradr","text":"Functions ct_commodity_lookup able take multiple search terms input. ct_commodity_lookup can return vector (seen ) named list, using parameter return_char ct_commodity_lookup, input search terms return zero results parameter verbose set TRUE, warning printed console (set verbose FALSE turn feature).","code":"ct_commodity_lookup(c(\"tomato\", \"trout\"), return_char = TRUE) #>  [1] \"0702 - Tomatoes; fresh or chilled\"                                                                                                                                                                                                                                      #>  [2] \"070200 - Vegetables; tomatoes, fresh or chilled\"                                                                                                                                                                                                                        #>  [3] \"2002 - Tomatoes; prepared or preserved otherwise than by vinegar or acetic acid\"                                                                                                                                                                                        #>  [4] \"200210 - Vegetable preparations; tomatoes, whole or in pieces, prepared or preserved otherwise than by vinegar or acetic acid\"                                                                                                                                          #>  [5] \"200290 - Vegetable preparations; tomatoes, (other than whole or in pieces), prepared or preserved otherwise than by vinegar or acetic acid\"                                                                                                                             #>  [6] \"200950 - Juice; tomato, unfermented, not containing added spirit, whether or not containing added sugar or other sweetening matter\"                                                                                                                                     #>  [7] \"210320 - Sauces; tomato ketchup and other tomato sauces\"                                                                                                                                                                                                                #>  [8] \"030191 - Fish; live, trout (Salmo trutta, Oncorhynchus mykiss, Oncorhynchus clarki, Oncorhynchus aguabonita, Oncorhynchus gilae, Oncorhynchus apache and Oncorhynchus chrysogaster)\"                                                                                    #>  [9] \"030211 - Fish; fresh or chilled, trout (Salmo trutta, Oncorhynchus mykiss, Oncorhynchus clarki, Oncorhynchus aguabonita, Oncorhynchus gilae, Oncorhynchus apache and Oncorhynchus chrysogaster), excluding fillets, fish meat of 0304, and edible fish offal of 0302.9\" #> [10] \"030314 - Fish; frozen, trout (Salmo trutta, Oncorhynchus mykiss, Oncorhynchus clarki, Oncorhynchus aguabonita, Oncorhynchus gilae, Oncorhynchus apache and Oncorhynchus chrysogaster), excluding fillets, meat of 0304, and edible fish offal of 0303.91 to 0303.99\"    #> [11] \"030321 - Trout (Salmo trutta, Oncorhynchus mykiss/clarki/aguabonita/gilae/apache/chrysogaster), frozen (excl. fillets/other fish meat of 03.04/livers & roes)\"                                                                                                          #> [12] \"030442 - Fish fillets; fresh or chilled, trout (Salmo trutta, Oncorhynchus mykiss, Oncorhynchus clarki, Oncorhynchus aguabonita, Oncorhynchus gilae, Oncorhynchus apache and Oncorhynchus chrysogaster)\"                                                                #> [13] \"030482 - Fish fillets; frozen, trout (Salmo trutta, Oncorhynchus mykiss, Oncorhynchus clarki, Oncorhynchus aguabonita, Oncorhynchus gilae, Oncorhynchus apache and Oncorhynchus chrysogaster)\"                                                                          #> [14] \"030543 - Fish; smoked, whether or not cooked before or during smoking, trout (Salmo trutta, Oncorhynchus mykiss/clarki/aguabonita/gilae/apache/chrysogaster), includes fillets, but excludes edible fish offal\" ct_commodity_lookup(c(\"tomato\", \"trout\"), return_char = FALSE) #> $tomato #> [1] \"0702 - Tomatoes; fresh or chilled\"                                                                                                          #> [2] \"070200 - Vegetables; tomatoes, fresh or chilled\"                                                                                            #> [3] \"2002 - Tomatoes; prepared or preserved otherwise than by vinegar or acetic acid\"                                                            #> [4] \"200210 - Vegetable preparations; tomatoes, whole or in pieces, prepared or preserved otherwise than by vinegar or acetic acid\"              #> [5] \"200290 - Vegetable preparations; tomatoes, (other than whole or in pieces), prepared or preserved otherwise than by vinegar or acetic acid\" #> [6] \"200950 - Juice; tomato, unfermented, not containing added spirit, whether or not containing added sugar or other sweetening matter\"         #> [7] \"210320 - Sauces; tomato ketchup and other tomato sauces\"                                                                                    #>  #> $trout #> [1] \"030191 - Fish; live, trout (Salmo trutta, Oncorhynchus mykiss, Oncorhynchus clarki, Oncorhynchus aguabonita, Oncorhynchus gilae, Oncorhynchus apache and Oncorhynchus chrysogaster)\"                                                                                    #> [2] \"030211 - Fish; fresh or chilled, trout (Salmo trutta, Oncorhynchus mykiss, Oncorhynchus clarki, Oncorhynchus aguabonita, Oncorhynchus gilae, Oncorhynchus apache and Oncorhynchus chrysogaster), excluding fillets, fish meat of 0304, and edible fish offal of 0302.9\" #> [3] \"030314 - Fish; frozen, trout (Salmo trutta, Oncorhynchus mykiss, Oncorhynchus clarki, Oncorhynchus aguabonita, Oncorhynchus gilae, Oncorhynchus apache and Oncorhynchus chrysogaster), excluding fillets, meat of 0304, and edible fish offal of 0303.91 to 0303.99\"    #> [4] \"030321 - Trout (Salmo trutta, Oncorhynchus mykiss/clarki/aguabonita/gilae/apache/chrysogaster), frozen (excl. fillets/other fish meat of 03.04/livers & roes)\"                                                                                                          #> [5] \"030442 - Fish fillets; fresh or chilled, trout (Salmo trutta, Oncorhynchus mykiss, Oncorhynchus clarki, Oncorhynchus aguabonita, Oncorhynchus gilae, Oncorhynchus apache and Oncorhynchus chrysogaster)\"                                                                #> [6] \"030482 - Fish fillets; frozen, trout (Salmo trutta, Oncorhynchus mykiss, Oncorhynchus clarki, Oncorhynchus aguabonita, Oncorhynchus gilae, Oncorhynchus apache and Oncorhynchus chrysogaster)\"                                                                          #> [7] \"030543 - Fish; smoked, whether or not cooked before or during smoking, trout (Salmo trutta, Oncorhynchus mykiss/clarki/aguabonita/gilae/apache/chrysogaster), includes fillets, but excludes edible fish offal\" ct_commodity_lookup(c(\"tomato\", \"sldfkjkfdsklsd\"), verbose = TRUE) #> Warning: There were no matching results found for inputs: sldfkjkfdsklsd #> $tomato #> [1] \"0702 - Tomatoes; fresh or chilled\"                                                                                                          #> [2] \"070200 - Vegetables; tomatoes, fresh or chilled\"                                                                                            #> [3] \"2002 - Tomatoes; prepared or preserved otherwise than by vinegar or acetic acid\"                                                            #> [4] \"200210 - Vegetable preparations; tomatoes, whole or in pieces, prepared or preserved otherwise than by vinegar or acetic acid\"              #> [5] \"200290 - Vegetable preparations; tomatoes, (other than whole or in pieces), prepared or preserved otherwise than by vinegar or acetic acid\" #> [6] \"200950 - Juice; tomato, unfermented, not containing added spirit, whether or not containing added sugar or other sweetening matter\"         #> [7] \"210320 - Sauces; tomato ketchup and other tomato sauces\"                                                                                    #>  #> $sldfkjkfdsklsd #> character(0)"},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"api-rate-limits","dir":"Articles","previous_headings":"","what":"API rate limits","title":"comtradr","text":"Comtrade API imposes rate limits users. comtradr features automated throttling API calls ensure user stays within limits defined Comtrade. breakdown limits, API docs details can found . Without user token: unlimited calls/day, 500 records per call (registration API subscription key required) ‚Äì end-point implemented . valid user token: 250 calls/day, 250,000 records per call (free registration API subscription key required). API also limits amount times can queried per minute, find documentation . Hence function automatically responds parameters returned request adjust changing wait times. addition rate limits, API imposes limits parameter combinations. arguments reporters, partners value specified natively anymore, implemented R convenience reasons side. date range start_date end_date must span twelve months twelve years. parameter specify years. arg commodity_codes, maximum number input values dependent maximum length request. Hence, specifying reporters partners, value might shorter.","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"package-data","dir":"Articles","previous_headings":"","what":"Package Data","title":"comtradr","text":"comtradr ships different package data objects, functions interacting using package data. Country/Commodity Reference Tables explained previously, making API calls comtradr often requires user query commodity reference table (done using functions ct_commodity_lookup). reference tables generated UN Comtrade, updated roughly year. Since ‚Äôre updated infrequently, tables saved cached data objects within comtradr package, referenced package functions needed. function features update argument, checks updates, downloads new tables necessary makes available current R session. also print message indicating whether updates found, like : updates found, message state reference table(s) updated. Additionally, Comtrade API features number different commodity reference tables, based different trade data classification schemes (details, see page API docs). comtradr ships available commodity reference tables. user may return access available commodity tables specifying arg commodity_type within function ct_get_ref_table (e.g., ct_get_ref_table(dataset_id = \"S1\") return commodity table follows ‚ÄúS1‚Äù scheme). dataset_id¬¥s listed help page function ct_get_ref_table(). follows: Datasets contain codes commodity_code argument. name provide commodity_classification. ‚ÄòHS‚Äô probably common classification goods. ‚ÄòB4‚Äô ‚ÄòB5‚Äô ‚ÄòEB02‚Äô ‚ÄòEB10‚Äô ‚ÄòEB10S‚Äô ‚ÄòEB‚Äô ‚ÄòS1‚Äô ‚ÄòS2‚Äô ‚ÄòS3‚Äô ‚ÄòS4‚Äô ‚ÄòSS‚Äô Datasets related arguments, can queried directly name argument ct_get_data()-function. ‚Äòreporter‚Äô ‚Äòpartner‚Äô ‚Äòmode_of_transport‚Äô ‚Äòcustoms_code‚Äô Furthermore, dataset readily available, iso3c-codes respective partner reporter countries country_codes$iso_3, recommend using ct_get_ref_table() function, allows update latest values fly.","code":"ct_commodity_lookup('tomato',update = T)"},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"visualize","dir":"Articles","previous_headings":"","what":"Visualize","title":"comtradr","text":"data collected, can use create basic visualizations. Plot 1: Plot total value (USD) Chinese exports Mexico, South Korea United States, year.  Plot 2: Plot top eight destination countries/areas Thai shrimp exports, weight (KG), 2007 - 2011.","code":"# Comtrade api query. example_2 <- ct_get_data(   reporter = 'CHN',   partner = c('KOR', 'USA','MEX'),   commodity_code = 'TOTAL',   start_date = 2012,   end_date = 2023,   flow_direction = 'export' ) library(ggplot2)  # Apply polished col headers. # Create plot. ggplot(example_2, aes(period, primary_value/1000000000, color = partner_desc,                        group = partner_desc)) +   geom_point(size = 2) +   geom_line(size = 1) +   scale_color_manual( values = c(\"darkgreen\",\"red\",\"grey30\"),                       name = \"Destination\\nCountry\") +   ylab('Export Value in billions') +   xlab('Year') +   labs(title = \"Total Value (USD) of Chinese Exports\", subtitle = 'by year') +   theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +   theme_minimal() # First, collect commodity codes related to shrimp. shrimp_codes <- ct_commodity_lookup(\"shrimp\",                                     return_code = TRUE,                                     return_char = TRUE)  # Comtrade api query. example_3 <- ct_get_data(reporter = \"THA\",                 partner = \"all\",                 trade_direction = \"exports\",                 start_date = 2007,                 end_date = 2011,                 commodity_code = shrimp_codes) library(ggplot2) library(dplyr)   # Create country specific \"total weight per year\" dataframe for plotting. plotdf <- example_3 %>%   group_by(partner_desc, period) %>%   summarise(kg = as.numeric(sum(net_wgt, na.rm = TRUE)))   # Get vector of the top 8 destination countries/areas by total weight shipped # across all years, then subset plotdf to only include observations related # to those countries/areas. top8 <- plotdf |>    group_by(partner_desc) |>    summarise(kg = as.numeric(sum(kg, na.rm = TRUE))) |>    slice_max(n = 8, order_by = kg) |>    arrange(desc(kg)) |>    pull(partner_desc) plotdf <- plotdf %>% filter(partner_desc %in% top8)  # Create plots (y-axis is NOT fixed across panels, this will allow us to ID # trends over time within each country/area individually). ggplot(plotdf,aes(period,kg/1000, group = partner_desc))+   geom_line() +    geom_point() +    facet_wrap(.~partner_desc, nrow = 2, ncol = 4,scales = 'free_y')+   labs(title = \"Weight (KG in tons) of Thai Shrimp Exports\",         subtitle =\"by Destination Area, 2007 - 2011\")+   theme_minimal()+   theme(axis.text.x = element_text(angle = 45,hjust = 1, vjust = 1))"},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"handling-large-amounts-of-parameters","dir":"Articles","previous_headings":"","what":"Handling large amounts of Parameters","title":"comtradr","text":"comtradr package, several function parameters can accept everything valid input. Using everything parameters specific meanings can powerful tool querying data. Internally, values set NULL parameter omitted entirely request API, API default returns possible values. ‚Äôs breakdown everything handled different parameters:","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"commodity_code","dir":"Articles","previous_headings":"Handling large amounts of Parameters","what":"commodity_code","title":"comtradr","text":"Setting commodity_code everything query possible commodity values. can useful want retrieve data commodities without specifying individual codes.","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"flow_direction","dir":"Articles","previous_headings":"Handling large amounts of Parameters","what":"flow_direction","title":"comtradr","text":"flow_direction set everything, possible values trade flow directions queried. includes imports, exports, re-imports, re-exports specified ct_get_ref_table('flow_direction').","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"reporter-and-partner","dir":"Articles","previous_headings":"Handling large amounts of Parameters","what":"reporter and partner","title":"comtradr","text":"Using everything reporter partner query possible values reporter partner countries, also includes aggregates like World miscellaneous like ASEAN. careful aggregating values, count trade values multiple times different aggregates. Alternatively, specifically values, can also use all_countries, allows query countries aggregates kind grouped parameters like ASEAN. values can usually safely aggregated. allows retrieve trade data countries without specifying individual ISO3 codes.","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"mode_of_transport-partner_2-and-customs_code","dir":"Articles","previous_headings":"Handling large amounts of Parameters","what":"mode_of_transport, partner_2, and customs_code","title":"comtradr","text":"Setting parameters everything query possible values related mode transport, secondary partner, customs procedures. provides comprehensive view data across different transportation modes customs categories.","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/comtradr.html","id":"example-usage","dir":"Articles","previous_headings":"Handling large amounts of Parameters","what":"Example Usage","title":"comtradr","text":"‚Äôs example might use everything parameters query comprehensive data: Using everything parameters can lead large datasets, often remove specific filters data. ‚Äôs essential mindful size data queried, especially using multiple everything parameters simultaneously.","code":"# Querying all commodities and flow directions for USA and Germany from  ## 2010 to 2011 data <- ct_get_data(   reporter = c('USA', 'DEU'),   commodity_code = 'everything',   flow_direction = 'everything',   start_date = '2010',   end_date = '2011' )"},{"path":"https://docs.ropensci.org/comtradr/articles/large_data.html","id":"the-limits","dir":"Articles","previous_headings":"","what":"The limits","title":"Querying large amounts of data","text":"free API tier, encounter two limits wanting calculate rather large datasets: can make 500 calls per day, can take 100.000 rows. information might updated Comtrade API, check date values . trying fetch maximum amount data minimum amount days, want minimize amount requests need making comprehensive possible, without ever exceeding 100k row limit.","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/large_data.html","id":"the-example---imports-of-the-eu","dir":"Articles","previous_headings":"","what":"The example - Imports of the EU","title":"Querying large amounts of data","text":"Let‚Äôs say, want know top exporter EU product class Harmonic System. useful, thinking dependencies countries, e.g.¬†evaluating usefulness impact Regulation EUDR Regulation. Quoting ITC: ‚Äúregulation entered force 29 June 2023, operator trader placing [specific] commodities EU market exporting EU, able prove goods originate deforested land (cutoff date 31 December 2020) contribute forest degradation‚Äù. One question arises , impacts regulation countries particularly important EU? Let‚Äôs replicate numbers, e.g.¬†relevance EU indicator map ITC spotlight cited . share one country EU‚Äôs imports product? Remember, get Comtrade data, need Commodity Codes, respective iso3 codes countries time frame.","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/large_data.html","id":"what-are-the-commodity-codes","dir":"Articles","previous_headings":"The example - Imports of the EU","what":"1. What are the commodity codes?","title":"Querying large amounts of data","text":"First need find , HS codes, goods affected. look Annex 1 Regulation. gives us less following list commodities product class ‚ÄòWood‚Äô.","code":"wood <-   c(     \"4401\",     \"4402\",     \"4403\",     \"4404\",     \"4405\",     \"4406\",     \"4407\",     \"4408\",     \"4409\",     \"4410\",     \"4411\",     \"4412\",     \"4413\",     \"4414\",     \"4415\",     \"4416\",     \"4417\",     \"4418\",     \"4419\",     \"4420\",     \"4421\",     \"940330\",     \"940340\",     \"940350\",     \"940360\",     \"940391\",     \"940610\",     \"4701\",     \"4702\",     \"4703\",     \"4704\",     \"4705\",     \"470610\",      \"470691\",      \"470692\",      \"470693\",     \"48\",     \"49\",     \"9401\"   ) wood_df <- data.frame(cmd_code = wood, product_cat = \"wood\")"},{"path":"https://docs.ropensci.org/comtradr/articles/large_data.html","id":"which-are-the-countries","dir":"Articles","previous_headings":"The example - Imports of the EU","what":"2. Which are the countries?","title":"Querying large amounts of data","text":"First need list EU27 countries iso3 codes. use giscoR package get information quickly. Secondly, need vector countries, can get easily just specifying all_countries parameter partner argument.","code":"eu_countries <- giscoR::gisco_countrycode |>    filter(eu == T) |>    pull(ISO3_CODE)"},{"path":"https://docs.ropensci.org/comtradr/articles/large_data.html","id":"getting-the-data","dir":"Articles","previous_headings":"","what":"Getting the data","title":"Querying large amounts of data","text":"calculate relevance product category EU, need calculate following: \\(\\text{Import Relevance EU %} = \\frac{\\sum_{c \\\\text{EU27}} I_{c,p}}{\\sum_{c \\\\text{EU27}} W_{c,p}}\\) : \\(I_{c,p}\\): Imports EU country c product category \\(p\\) specific non-EU country. \\(W_{c,p}\\): Total imports EU country \\(c\\) product category \\(p\\) world. plain English, need know much given product comes one country share total imports . Let‚Äôs get \\(I_{c,p}\\) first.","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/large_data.html","id":"eu-imports-from-all-countries","dir":"Articles","previous_headings":"Getting the data","what":"EU imports from all countries","title":"Querying large amounts of data","text":"execute query, get return object contains exactly 100k rows warning, intend get exactly 100k rows, likely hit limit. seems natural case, trying get data 39 commodity classes 27 EU countries reporters 190 partners 4 years. equals potentially 800k rows. Let‚Äôs break simple loop. iterate years, get us 200k rows year. Since 250 calls per day, let‚Äôs just iterate eu country get data separately. Congratulations, now queried 170k rows data, exceeding limit one call API! Getting data imports World, \\(W_{c,p}\\), easy now!","code":"data_eu_imports <- ct_get_data(     commodity_code = wood,     reporter = eu_countries,     partner = \"all_countries\",     flow_direction = \"import\",     start_date = 2018,     end_date = 2022   ) ## initiate a new instance of an empty tibble() data_eu_imports <- data.frame()  for(reporter in eu_countries){   ## for a simple status, print the country we are at    ## you can get a lot fancier with the library `progress` for progress bars   print(reporter)      ## assign the result into a temporary object   temp <- ct_get_data(     commodity_code = wood,     reporter = reporter,     partner = \"all_countries\",     flow_direction = \"import\",     start_date = 2018,     end_date = 2022   )       ## bind the subset to the complete data   data_eu_imports <- rbind(data_eu_imports, temp)      ## note that I did not include any sleep() command here to make the requests   ## wait for a specified amount of time, the package keeps track of that for    ## you automatically and backs off when needed } nrow(data_eu_imports) #> [1] 173358 data_eu_imports_world <- ct_get_data(     commodity_code = wood,     reporter = eu_countries,     partner = \"World\",     flow_direction = \"import\",     start_date = 2018,     end_date = 2022   ) nrow(data_eu_imports_world) #> [1] 5004"},{"path":"https://docs.ropensci.org/comtradr/articles/large_data.html","id":"data-cleaning","dir":"Articles","previous_headings":"Getting the data","what":"Data cleaning","title":"Querying large amounts of data","text":"Let‚Äôs see biggest share EU import market wood (excluding EU countries). Let‚Äôs also little sanity check. summing shares one year, get 100 %. seems hold. Maybe last year outlier? can calculate mean relevante country past 5 years get important countries .","code":"#> `summarise()` has grouped output by 'partner_iso', 'partner_desc', 'flow_desc', #> 'product_cat'. You can override using the `.groups` argument. data_eu_imports_world_clean <- data_eu_imports_world |>   left_join(wood_df, by = \"cmd_code\") |>   select(     reporter_iso,     reporter_desc,     flow_desc,     partner_iso,     partner_desc,     cmd_code,     cmd_desc,     product_cat,     primary_value,     ref_year   ) |>     ## we now aggregate the imports by the product category and year      ## over all reporters, since we are interested      ## in the imports of the whole EU   group_by(product_cat, ref_year) |>   summarise(eu_import_product_cat_world = sum(primary_value)) |>   ungroup() #> `summarise()` has grouped output by 'product_cat'. You can override using the #> `.groups` argument. #### relevance to EU relevance <- data_eu_imports_clean |>    left_join(data_eu_imports_world_clean) |>    ## join the two datasets   mutate(relevance_eu = eu_import_product_cat/            eu_import_product_cat_world*100) |>    ## calculate the ratio between world imports and imports from one partner |>    select( -flow_desc) |> ungroup()   #> Joining with `by = join_by(product_cat, ref_year)` top_10 <- relevance |>    filter(!partner_iso %in% eu_countries) |>    group_by(ref_year) |>    slice_max(order_by = relevance_eu, n = 10) |>    select(partner_desc, relevance_eu, ref_year) |>    arrange(desc(ref_year))  head(top_10, 10) #> # A tibble: 10 √ó 3 #> # Groups:   ref_year [1] #>    partner_desc       relevance_eu ref_year #>    <chr>                     <dbl>    <int> #>  1 China                     7.77      2022 #>  2 USA                       2.03      2022 #>  3 Brazil                    1.96      2022 #>  4 United Kingdom            1.95      2022 #>  5 T√ºrkiye                   1.19      2022 #>  6 Ukraine                   1.07      2022 #>  7 Russian Federation        0.971     2022 #>  8 Switzerland               0.876     2022 #>  9 Norway                    0.799     2022 #> 10 Indonesia                 0.656     2022 relevance |> ungroup() |>    group_by(ref_year) |>    summarise(sum = sum(relevance_eu)) #> # A tibble: 5 √ó 2 #>   ref_year   sum #>      <int> <dbl> #> 1     2018  100. #> 2     2019  100. #> 3     2020  100. #> 4     2021  100. #> 5     2022  100. average_share <- relevance |>    filter(!partner_iso %in% eu_countries) |>    group_by(partner_iso, partner_desc) |>   summarise(mean_relevance_eu = mean(relevance_eu)) |>    ungroup() |>    slice_max(order_by = mean_relevance_eu, n = 10) #> `summarise()` has grouped output by 'partner_iso'. You can override using the #> `.groups` argument. ggplot(average_share) +   geom_col(aes(reorder(partner_desc,mean_relevance_eu), mean_relevance_eu),             fill = 'brown') +   coord_flip() +    theme_minimal() +   labs(title = 'Share of EU imports',         subtitle = 'as average over last 4 years') +   xlab('average relevance in %')+   ylab('')"},{"path":"https://docs.ropensci.org/comtradr/articles/large_data.html","id":"caveat-on-trade-dependencies","dir":"Articles","previous_headings":"","what":"Caveat on trade ‚Äúdependencies‚Äù","title":"Querying large amounts of data","text":"However, several important caveats made. addressed , vignette query larger data, trade dependencies per se. Hence real-world example, without complications address valid analysis. Dependency certain country terms much product others import , equal dependency terms product, country might substantial production items domestically. E.g. (hypothetically) Argentina import 90% wine Chile imply Argentina depends wine Chile, Argentina produce substantive amount wine. included calculation total imports EU, imports EU countries, .k.. intra-EU imports. mean probably underestimate much total EU imports really come partner countries outside EU. HS codes wood completely included per Regulation, spared us intricacies ones exclude . Imports data already better exports data, countries incentive get good data charge tariffs, however best data EU comes Eurostat, Comtrade. since Comtrade data, .","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/transition.html","id":"transitioning-from-the-old-api-to-the-new-api","dir":"Articles","previous_headings":"","what":"Transitioning from the old API to the new API üîÑ","title":"Transition from old comtradr","text":"update Comtrade API United Nations, package undergone comprehensive rewrite. functions available deprecated breaking changes also names arguments possible parameter values. examples, hope make transition little easier. design principles package remained similar. important changes can summarized package: - extensively checks parameters validity submitting - allows iso3 standardized country codes inputs - queries new parameters UN added, mode transport. see things stayed less transition breeze! üí®","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/transition.html","id":"the-basics","dir":"Articles","previous_headings":"Transitioning from the old API to the new API üîÑ","what":"The basics üìä","title":"Transition from old comtradr","text":"","code":"#### Previously q <- ct_search(reporters = \"USA\",                 partners = c(\"Germany\", \"France\", \"Japan\", \"Mexico\"),                 trade_direction = \"imports\")  #### Now q <- ct_get_data(reporter = \"USA\",                 partner = c(\"DEU\", \"FRA\", \"JPN\", \"MEX\"),                 flow_direction = \"import\",                start_date = 2020,                end_date = 2023)"},{"path":"https://docs.ropensci.org/comtradr/articles/transition.html","id":"the-time-parameter","dir":"Articles","previous_headings":"Transitioning from the old API to the new API üîÑ","what":"The time parameter","title":"Transition from old comtradr","text":"","code":"#### Previously # Get all monthly data for a single year (API max of 12 months per call). q <- ct_search(reporters = \"USA\",                 partners = c(\"Germany\", \"France\", \"Japan\", \"Mexico\"),                 trade_direction = \"imports\",                 start_date = 2012,                 end_date = 2012,                 freq = \"monthly\")  # monthly data for a specific span of months (API max of five months per call). q <- ct_search(reporters = \"USA\",                 partners = c(\"Germany\", \"France\", \"Japan\", \"Mexico\"),                 trade_direction = \"imports\",                 start_date = \"2012-03\",                 end_date = \"2012-07\",                 freq = \"monthly\")   #### Now # Get all monthly data for a single year (API max of 12 months per call). q <- ct_get_data(reporter = \"USA\",                 partner = c(\"DEU\", \"FRA\", \"JPN\", \"MEX\"),                 flow_direction = \"import\",                start_date = 2012,                 end_date = 2012,                 frequency = \"M\"                )  # monthly data for a specific span of months (API max of five months per call). q <- ct_get_data(reporter = \"USA\",                 partner = c(\"DEU\", \"FRA\", \"JPN\", \"MEX\"),                 flow_direction = \"import\",                start_date = \"2012-03\",                 end_date = \"2012-07\",                 frequency = \"M\"                )"},{"path":[]},{"path":"https://docs.ropensci.org/comtradr/articles/transition.html","id":"previously","dir":"Articles","previous_headings":"Transitioning from the old API to the new API üîÑ > Country Names üåç","what":"Previously","title":"Transition from old comtradr","text":"Countries passed parameters reporters partners must spelled appear Comtrade country reference table. Function ct_country_lookup allows us query country reference table.","code":"ct_country_lookup(\"korea\", \"reporter\") ct_country_lookup(\"bolivia\", \"partner\") q <- ct_search(reporters = \"Rep. of Korea\",                 partners = \"Bolivia (Plurinational State of)\",                 trade_direction = \"all\")"},{"path":"https://docs.ropensci.org/comtradr/articles/transition.html","id":"now","dir":"Articles","previous_headings":"Transitioning from the old API to the new API üîÑ > Country Names üåç","what":"Now","title":"Transition from old comtradr","text":"need specify Comtrade country name, just use iso3 codes, can extract myriad packages, e.g.¬† countrycodes, rnaturalearth giscoR.","code":"asia <- countrycode::codelist |>    poorman::filter(un.region.name == \"Asia\") |>    poorman::pull(iso3c)  q <- ct_get_data(reporter = asia,                 partner = c(\"DEU\", \"FRA\", \"JPN\", \"MEX\"),                 flow_direction = \"import\",                start_date = 2012,                 end_date = 2012,                 frequency = \"M\"                )"},{"path":[]},{"path":"https://docs.ropensci.org/comtradr/articles/transition.html","id":"previously-now","dir":"Articles","previous_headings":"Transitioning from the old API to the new API üîÑ > Searching for commodity codes üö¢üì¶","what":"Previously == Now","title":"Transition from old comtradr","text":"changed! Search trade related specific commodities (say, tomatoes). can query Comtrade commodity reference table see different commodity descriptions available tomatoes. want search shipment data commodity descriptions listed, can simply adjust parameters ct_commodity_lookup return codes, can passed along ct_search.","code":"ct_commodity_lookup(\"tomato\") tomato_codes <- ct_commodity_lookup(\"tomato\",                                      return_code = TRUE,                                      return_char = TRUE)"},{"path":"https://docs.ropensci.org/comtradr/articles/transition.html","id":"api-search-metadata","dir":"Articles","previous_headings":"Transitioning from the old API to the new API üîÑ","what":"API search metadata üìë","title":"Transition from old comtradr","text":"","code":"#### Previously # The url of the API call. attributes(q)$url # The date-time of the API call. attributes(q)$time_stamp # The total duration of the API call, in seconds. attributes(q)$req_duration #### Now # The url of the API call. attributes(q)$url ## [1] \"https://comtradeapi.un.org/data/v1/get/C/A/HS?cmdCode=TOTAL&flowCode=M&partnerCode=280%2C276&reporterCode=842%2C841&period=2012&motCode=0&partner2Code=0&customsCode=C00&includeDesc=TRUE\" # The date-time of the API call. attributes(q)$time ## [1] \"2023-12-23 11:47:51 UTC\" # The total duration of the API call, in seconds is not returned anymore!"},{"path":"https://docs.ropensci.org/comtradr/articles/transition.html","id":"package-data","dir":"Articles","previous_headings":"Transitioning from the old API to the new API üîÑ","what":"Package Data üì¶","title":"Transition from old comtradr","text":"comtradr ships different package data objects, functions interacting using package data.","code":""},{"path":"https://docs.ropensci.org/comtradr/articles/transition.html","id":"previously-1","dir":"Articles","previous_headings":"Transitioning from the old API to the new API üîÑ > Package Data üì¶","what":"Previously","title":"Transition from old comtradr","text":"package data mostly stored different databases queried updated separately. See :","code":"ct_update_databases()  ct_commodity_db_type()"},{"path":"https://docs.ropensci.org/comtradr/articles/transition.html","id":"now-1","dir":"Articles","previous_headings":"Transitioning from the old API to the new API üîÑ > Package Data üì¶","what":"Now","title":"Transition from old comtradr","text":"package data can referenced one function, automatically includes update possibility.","code":"## to get the parameter values for the mode_of_transport argument ct_get_ref_table(\"mode_of_transport\")  ## to get the parameter values for the partner argument ct_get_ref_table(\"partner\")  ## to update the parameter reference for the partner argument ct_get_ref_table(\"partner\", update = T)  ## to get any commodity classification scheme, just pass in the code ## you would use in commodity_classification ct_get_ref_table(\"HS\")"},{"path":"https://docs.ropensci.org/comtradr/articles/transition.html","id":"polished-column-headers","dir":"Articles","previous_headings":"Transitioning from the old API to the new API üîÑ","what":"‚ÄúPolished‚Äù Column Headers üé®","title":"Transition from old comtradr","text":"Previously polished column names, handy plotting, human readable. longer included functionality.","code":"# Apply polished column headers q <- ct_use_pretty_cols(q)"},{"path":"https://docs.ropensci.org/comtradr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Bochtler. Author, maintainer, copyright holder. Harriet Goers. Author. Chris Muir. Author. Alicia Schep. Reviewer.            Alicia reviewed package rOpenSci,                    see https://github.com/ropensci/onboarding/issues/141 Rafael Hellwig. Reviewer.            Rafael reviewed package rOpenSci,                    see https://github.com/ropensci/onboarding/issues/141 Ernest Guevarra. Reviewer.            Ernest reviewed package rOpenSci,                    see https://github.com/ropensci/software-review/issues/613 Nicholas Potter. Reviewer.            Nicholas reviewed package rOpenSci,                    see https://github.com/ropensci/software-review/issues/613 Juergen Amann. Contributor.","code":""},{"path":"https://docs.ropensci.org/comtradr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bochtler P, Goers H, Muir C (2024). comtradr: Interface United Nations Comtrade API. R package version 0.4.0.9000, https://github.com/ropensci/comtradr, https://docs.ropensci.org/comtradr/.","code":"@Manual{,   title = {comtradr: Interface with the United Nations Comtrade API},   author = {Paul Bochtler and Harriet Goers and Chris Muir},   year = {2024},   note = {R package version 0.4.0.9000, https://github.com/ropensci/comtradr},   url = {https://docs.ropensci.org/comtradr/}, }"},{"path":"https://docs.ropensci.org/comtradr/index.html","id":"comtradr-","dir":"","previous_headings":"","what":"Interface with the United Nations Comtrade API","title":"Interface with the United Nations Comtrade API","text":"Please report issues, comments, feature requests. much looking feedback usability new functions. Please note package released Contributor Code Conduct. contributing project, agree abide terms. information citation package, use citation(\"comtradr\")","code":""},{"path":"https://docs.ropensci.org/comtradr/index.html","id":"installation-Ô∏è","dir":"","previous_headings":"","what":"Installation üõ†Ô∏è","title":"Interface with the United Nations Comtrade API","text":"can install package : install dev version github, use:","code":"install.packages(\"comtradr\") # install.packages(\"devtools\") devtools::install_github(\"ropensci/comtradr@main\")"},{"path":[]},{"path":"https://docs.ropensci.org/comtradr/index.html","id":"authentication-","dir":"","previous_headings":"Usage","what":"Authentication üîê","title":"Interface with the United Nations Comtrade API","text":"discouraged complicated access token - can ! üí™ stated , need API token, see FAQ Comtrade details obtain : ‚û°Ô∏è https://unstats.un.org/wiki/display/comtrade/New+Comtrade+User+Guide#NewComtradeUserGuide-UNComtradeAPIManagement need follow detailed explanations, include screenshots, Wiki Comtrade letter. ‚òùÔ∏è writing , might updated regularly. However, signed , select comtrade - v1 product, free API.","code":""},{"path":"https://docs.ropensci.org/comtradr/index.html","id":"storing-the-api-key","dir":"","previous_headings":"Usage > Authentication üîê","what":"Storing the API key","title":"Interface with the United Nations Comtrade API","text":"interactive session, can call following function save API token environment file current session. interactive session, can register token session using following base-r function. like set comtrade key permanently, recommend editing project .Renviron file, need add line COMTRADE_PRIMARY = xxxx--key-xxxx. ‚ÑπÔ∏è forget line break last entry. easiest taking advantage great usethis package.","code":"library(comtradr)  set_primary_comtrade_key() Sys.setenv('COMTRADE_PRIMARY' = 'xxxxxxxxxxxxxxxxx') usethis::edit_r_environ(scope = 'project')"},{"path":"https://docs.ropensci.org/comtradr/index.html","id":"example-1-Ô∏è","dir":"","previous_headings":"Usage","what":"Example 1 ‚õ¥Ô∏è","title":"Interface with the United Nations Comtrade API","text":"Now can get actually request data. Let us query total trade China Germany Argentina, reported China.","code":"# Country names passed to the API query function must be spelled in ISO3 format.  # For details see: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3   # You can request a maximum interval of twelve years from the API example1 <- comtradr::ct_get_data(   reporter = 'CHN',   partner = c('ARG', 'DEU'),   start_date = 2010,   end_date = 2012 )  # Inspect the return data str(example1)"},{"path":"https://docs.ropensci.org/comtradr/index.html","id":"example-2-Ô∏è","dir":"","previous_headings":"Usage","what":"Example 2 ‚õ¥Ô∏è","title":"Interface with the United Nations Comtrade API","text":"Return exports related Wine Argentina countries, years 2007 2011.","code":"library(comtradr)  # Fetch all shrimp related commodity codes from the Comtrade commodities DB. # This vector of codes will get passed to the API query. wine_codes <- ct_commodity_lookup(\"wine\", return_code = TRUE, return_char = TRUE)  # API query. example2 <- ct_get_data(   reporter =  \"ARG\",   flow_direction = \"export\",   partner = \"all\",   start_date = 2007,   end_date = 2011,   commodity_code = wine_codes )  # Inspect the output str(example2)"},{"path":"https://docs.ropensci.org/comtradr/index.html","id":"data-availability","dir":"","previous_headings":"","what":"Data availability","title":"Interface with the United Nations Comtrade API","text":"See overview available commodity classifications.","code":""},{"path":"https://docs.ropensci.org/comtradr/index.html","id":"comtradr-has-relaunched-recently-","dir":"","previous_headings":"","what":"Comtradr has relaunched recently üöß","title":"Interface with the United Nations Comtrade API","text":"Comtrade API undergoing extensive updates. point legacy API taken offline (see ). order accommodate new syntax, well adding new functionality, comtradr package undergoing extensive re-write. Additionally, possible anymore query API without API token. still free version, unlike need registered user obtain token. See FAQ details obtain new access tokens.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/comtradr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"comtradr: Interface with the United Nations 'Comtrade' API ‚Äî comtradr-package","title":"comtradr: Interface with the United Nations 'Comtrade' API ‚Äî comtradr-package","text":"Interface extract data United Nations 'Comtrade' API https://comtradeplus.un.org/. 'Comtrade' provides country level shipping data variety commodities, functions allow easy API query data returned tidy data frame.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/comtradr/reference/comtradr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"comtradr: Interface with the United Nations 'Comtrade' API ‚Äî comtradr-package","text":"Maintainer: Paul Bochtler paulbochtler.gh@gmail.com (ORCID) [copyright holder] Authors: Harriet Goers hgoers@umd.edu Chris Muir chrismuirRVA@gmail.com contributors: Alicia Schep (ORCID) (Alicia reviewed package rOpenSci, see https://github.com/ropensci/onboarding/issues/141) [reviewer] Rafael Hellwig (ORCID) (Rafael reviewed package rOpenSci, see https://github.com/ropensci/onboarding/issues/141) [reviewer] Ernest Guevarra (ORCID) (Ernest reviewed package rOpenSci, see https://github.com/ropensci/software-review/issues/613) [reviewer] Nicholas Potter (ORCID) (Nicholas reviewed package rOpenSci, see https://github.com/ropensci/software-review/issues/613) [reviewer] Juergen Amann [contributor]","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/country_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Country codes ‚Äî country_codes","title":"Country codes ‚Äî country_codes","text":"full dataset reporter partner codes available UN Comtrade database.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/country_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Country codes ‚Äî country_codes","text":"","code":"country_codes"},{"path":"https://docs.ropensci.org/comtradr/reference/country_codes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Country codes ‚Äî country_codes","text":"country_codes dataframe 312 rows eight columns: id Unique country code. country Name country (English). iso_3 country's ISO 3 code. entry_year country's entry international system 1900 (whichever largest). exit_year country's exit international system, applicable. group Indicates whether entity group countries. example, ASEAN European Union. reporter Indicates whether country reporter UN Comtrade database. partner Indicates whether country can reported others UN Comtrade database. partners reporters. example, World report trade values.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/country_codes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Country codes ‚Äî country_codes","text":"https://comtradeapi.un.org/files/v1/app/reference/Reporters.json https://comtradeapi.un.org/files/v1/app/reference/partnerAreas.json","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_commodity_db_type.html","id":null,"dir":"Reference","previous_headings":"","what":"ct_commodity_db_type ‚Äî ct_commodity_db_type","title":"ct_commodity_db_type ‚Äî ct_commodity_db_type","text":"function deprecated. currently alternative function.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_commodity_db_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ct_commodity_db_type ‚Äî ct_commodity_db_type","text":"","code":"ct_commodity_db_type(...)"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_commodity_db_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ct_commodity_db_type ‚Äî ct_commodity_db_type","text":"... Used catch possible arguments users supplied function.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_commodity_db_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ct_commodity_db_type ‚Äî ct_commodity_db_type","text":"depreciation error","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_commodity_db_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ct_commodity_db_type ‚Äî ct_commodity_db_type","text":"","code":"if (FALSE) { # interactive() # no examples because only legacy function }"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_commodity_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"UN Comtrade commodities database query ‚Äî ct_commodity_lookup","title":"UN Comtrade commodities database query ‚Äî ct_commodity_lookup","text":"Comtrade API requires searches specific commodities done using commodity codes. helper function querying Comtrade commodity database. takes input vector commodities commodity codes. Output list vector commodity descriptions codes associated input search_terms. use UN Comtrade API, full API docs can found https://unstats.un.org/wiki/display/comtrade/","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_commodity_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UN Comtrade commodities database query ‚Äî ct_commodity_lookup","text":"","code":"ct_commodity_lookup(   search_terms,   return_code = FALSE,   commodity_classification = \"HS\",   type = \"goods\",   return_char = FALSE,   verbose = TRUE,   ignore.case = TRUE,   update = FALSE,   ... )"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_commodity_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UN Comtrade commodities database query ‚Äî ct_commodity_lookup","text":"search_terms Commodity names commodity codes, char numeric vector. return_code Logical, set FALSE, function return set commodity descriptions along commodity codes (single string match found), set TRUE return commodity codes. Default value FALSE. commodity_classification trade classification scheme. Possible values goods: c('HS','S1','S2','S3','S4','SS','B4','B5'); services: c('EB02','EB10','EB10S','EB'). Default: 'HS'. type type returned trade data. Possible values: 'goods' trade goods, 'services' trade services. Default: 'goods'. return_char Logical, set FALSE, function return matches named list, set TRUE return character vector. Default value FALSE. verbose Logical, set TRUE, warning message print console elements input \"search_terms\" returned matches (message indicate elements returned data). Default TRUE. ignore.case logical, passed along arg ignore.case within grepl. Default value TRUE. update TRUE, downloads possibly updated reference tables UN. Default: FALSE. ... additional args passed along grepl.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_commodity_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UN Comtrade commodities database query ‚Äî ct_commodity_lookup","text":"list character vector commodity descriptions /commodity codes matches elements \"search_terms\".","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_commodity_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"UN Comtrade commodities database query ‚Äî ct_commodity_lookup","text":"function uses regular expressions (regex) find matches within commodity DB. means treat match commodity description contains input search term. using regex within R, see https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html","code":""},{"path":[]},{"path":"https://docs.ropensci.org/comtradr/reference/ct_commodity_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UN Comtrade commodities database query ‚Äî ct_commodity_lookup","text":"","code":"if (FALSE) { # interactive() comtradr::ct_commodity_lookup(\"wine\") }"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_country_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"ct_country_lookup ‚Äî ct_country_lookup","title":"ct_country_lookup ‚Äî ct_country_lookup","text":"function deprecated. can use country_codes return dataset possible country codes, general specification iso 3 codes makes look-unnecessary.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_country_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ct_country_lookup ‚Äî ct_country_lookup","text":"","code":"ct_country_lookup(...)"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_country_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ct_country_lookup ‚Äî ct_country_lookup","text":"... Used catch possible arguments users supplied function.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_country_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ct_country_lookup ‚Äî ct_country_lookup","text":"depreciation error","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_country_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ct_country_lookup ‚Äî ct_country_lookup","text":"","code":"if (FALSE) { # interactive() # no examples because only legacy function }"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get trade data from the UN Comtrade API ‚Äî ct_get_data","title":"Get trade data from the UN Comtrade API ‚Äî ct_get_data","text":"function queries UN Comtrade API retrieve international trade data. allows detailed specification query, including type data (goods services), frequency (annual monthly), commodity classification, flow direction, . providing everything certain parameters, can query possible values. function opinionated already verifies certain parameters pure wrapper around API.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get trade data from the UN Comtrade API ‚Äî ct_get_data","text":"","code":"ct_get_data(   type = \"goods\",   frequency = \"A\",   commodity_classification = \"HS\",   commodity_code = \"TOTAL\",   flow_direction = c(\"Import\", \"Export\", \"Re-export\", \"Re-import\"),   reporter = \"all_countries\",   partner = \"World\",   start_date = NULL,   end_date = NULL,   process = TRUE,   tidy_cols = TRUE,   verbose = FALSE,   primary_token = get_primary_comtrade_key(),   mode_of_transport = \"TOTAL modes of transport\",   partner_2 = \"World\",   customs_code = \"C00\",   update = FALSE,   requests_per_second = 10/60,   extra_params = NULL,   cache = FALSE )"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get trade data from the UN Comtrade API ‚Äî ct_get_data","text":"type type returned trade data. Possible values: 'goods' trade goods, 'services' trade services. Default: 'goods'. frequency frequency returned trade data. Possible values: '' annual data, 'M' monthly data. Default: ''. commodity_classification trade classification scheme. Possible values goods: c('HS','S1','S2','S3','S4','SS','B4','B5'); services: c('EB02','EB10','EB10S','EB'). Default: 'HS'. commodity_code commodity code(s) everything possible codes. See comtradr::ct_get_ref_table('HS') possible values. Default: 'TOTAL' (sum commodities). flow_direction direction trade flows everything. Possible values can found ct_get_ref_table('flow_direction'). implemented case-insensitive, 'import' 'Import' equivalent. Default: c('import','export','re-export','re-import'). reporter Reporter ISO3 code(s), everything all_countries. See comtradr::country_codes comtradr::ct_get_ref_table('reporter') possible values. all_countries returns countries without aggregates everything returns possible parameters. Default: 'all_countries'. partner Partner ISO3 code(s), everything all_countries. See comtradr::country_codes possible values. all_countries returns countries without aggregates everything returns possible parameters, incl. aggregates like World. Default: 'World' (partners aggregate). start_date start date query. Format: yyyy yearly, yyyy-mm monthly. end_date end date query. Format: yyyy yearly, yyyy-mm monthly. Max: 12 years start date annual data, one year monthly data. process TRUE, returns data.frame results. FALSE, returns raw httr2 request. Default: TRUE. tidy_cols TRUE, returns tidy column names. FALSE, returns raw column names. Default: TRUE. verbose TRUE, sends status updates console. FALSE, runs functions quietly. Default: FALSE. primary_token primary UN Comtrade API token. Default: stored token comtradr::set_primary_comtrade_key. mode_of_transport Text code mode transport everything possible parameters. See ct_get_ref_table(dataset_id = 'mode_of_transport') possible values. Default: 'TOTAL modes transport' (TOTAL). partner_2 Partner 2 ISO3 code(s), everything all_countries. See comtradr::country_codes possible values. all_countries returns countries without aggregates everything returns possible parameters, incl. aggregates like World. Default: 'World' (partners aggregate). customs_code Customs Code ID everything possible parameters. See ct_get_ref_table(dataset_id = 'customs_code') possible values. Default: 'C00' (TOTAL). update TRUE, downloads possibly updated reference tables UN. Default: FALSE. requests_per_second Rate requests per second executed, usually specified fraction, e.g. 10/60 10 requests per minute, see req_throttle() details. extra_params Additional parameters API, passed query parameters without checking. Please provide named list parameter. Default: NULL. cache logical value determine, whether requests cached . set True, rappdirs::user_cache_dir() used determine location cache. Use .Renviron file set R_USER_CACHE_DIR order change location. Default: False.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get trade data from the UN Comtrade API ‚Äî ct_get_data","text":"data.frame trade data , process = F, httr2 response object.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get trade data from the UN Comtrade API ‚Äî ct_get_data","text":"UN Comtrade database provides repository official international trade statistics relevant analytical tables. contains annual trade statistics starting 1988 monthly trade statistics since 2000 goods data Parameters accept everything query possible values. example, setting commodity_code = 'everything' retrieve data commodity codes. can useful broad queries may result large datasets.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get trade data from the UN Comtrade API ‚Äî ct_get_data","text":"","code":"if (FALSE) { # interactive() # Query goods data for China's trade with Argentina and Germany in 2019 ct_get_data(   type = \"goods\",   commodity_classification = \"HS\",   commodity_code = \"TOTAL\",   reporter = \"CHN\",   partner = c(\"ARG\", \"DEU\"),   start_date = \"2019\",   end_date = \"2019\",   flow_direction = \"Import\",   partner_2 = \"World\",   verbose = TRUE )  # Query all commodity codes for China's imports from Germany in 2019 ct_get_data(   commodity_code = \"everything\",   reporter = \"CHN\",   partner = \"DEU\",   start_date = \"2019\",   end_date = \"2019\",   flow_direction = \"Import\" )  # Query all commodity codes for China's imports from Germany # from January to June of 2019 ct_get_data(   commodity_code = \"everything\",   reporter = \"CHN\",   partner = \"DEU\",   start_date = \"2019\",   end_date = \"2019\",   flow_direction = \"import\" ) }"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_ref_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get reference table from package data ‚Äî ct_get_ref_table","title":"Get reference table from package data ‚Äî ct_get_ref_table","text":"first time, function read disk, second time environment. case necessary update new data saved environment current session. can use table look reference tables necessary extract respective classification codes hand. general recommend function ct_commodity_lookup purpose. uses present function backend.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_ref_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get reference table from package data ‚Äî ct_get_ref_table","text":"","code":"ct_get_ref_table(dataset_id, update = FALSE, verbose = FALSE)"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_ref_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get reference table from package data ‚Äî ct_get_ref_table","text":"dataset_id dataset ID, either partner, reporter valid classification scheme. update TRUE, downloads possibly updated reference tables UN. Default: FALSE. verbose TRUE, sends status updates console. FALSE, runs functions quietly. Default: FALSE.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_ref_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get reference table from package data ‚Äî ct_get_ref_table","text":"tidy dataset reference table","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_ref_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get reference table from package data ‚Äî ct_get_ref_table","text":"function allows query possible input parameters listed Comtrade API. following dataset_ids permitted: Datasets contain codes commodity_code argument. name provide commodity_classification. 'HS' probably common classification goods. 'B4' 'B5' 'EB02' 'EB10' 'EB10S' 'EB' 'S1' 'S2' 'S3' 'S4' 'SS' 'reporter' 'partner' 'mode_of_transport' 'customs_code' 'flow_direction'","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_ref_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get reference table from package data ‚Äî ct_get_ref_table","text":"","code":"if (FALSE) { # interactive() ## get HS commodity table ct_get_ref_table(\"HS\")  ## get reporter table ct_get_ref_table(\"reporter\") }"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_remaining_hourly_queries.html","id":null,"dir":"Reference","previous_headings":"","what":"ct_get_remaining_hourly_queries ‚Äî ct_get_remaining_hourly_queries","title":"ct_get_remaining_hourly_queries ‚Äî ct_get_remaining_hourly_queries","text":"function deprecated. reset time, upper limit 250 calls per day enforced daily.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_remaining_hourly_queries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ct_get_remaining_hourly_queries ‚Äî ct_get_remaining_hourly_queries","text":"","code":"ct_get_remaining_hourly_queries(...)"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_remaining_hourly_queries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ct_get_remaining_hourly_queries ‚Äî ct_get_remaining_hourly_queries","text":"... Used catch possible arguments users supplied function.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_remaining_hourly_queries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ct_get_remaining_hourly_queries ‚Äî ct_get_remaining_hourly_queries","text":"depreciation error","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_remaining_hourly_queries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ct_get_remaining_hourly_queries ‚Äî ct_get_remaining_hourly_queries","text":"","code":"if (FALSE) { # interactive() # no examples because only legacy function }"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_reset_time.html","id":null,"dir":"Reference","previous_headings":"","what":"ct_get_reset_time ‚Äî ct_get_reset_time","title":"ct_get_reset_time ‚Äî ct_get_reset_time","text":"function deprecated. reset time, upper limit 250 calls per day enforced daily.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_reset_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ct_get_reset_time ‚Äî ct_get_reset_time","text":"","code":"ct_get_reset_time(...)"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_reset_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ct_get_reset_time ‚Äî ct_get_reset_time","text":"... Used catch possible arguments users supplied function.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_reset_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ct_get_reset_time ‚Äî ct_get_reset_time","text":"depreciation error","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_get_reset_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ct_get_reset_time ‚Äî ct_get_reset_time","text":"","code":"if (FALSE) { # interactive() # no examples because only legacy function }"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_pretty_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"ct_pretty_cols ‚Äî ct_pretty_cols","title":"ct_pretty_cols ‚Äî ct_pretty_cols","text":"data.frame matched list tidy untidy column names results.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_pretty_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ct_pretty_cols ‚Äî ct_pretty_cols","text":"","code":"ct_pretty_cols"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_pretty_cols.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ct_pretty_cols ‚Äî ct_pretty_cols","text":"country_codes dataframe 47 rows twi columns: tidy columns original column names","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_register_token.html","id":null,"dir":"Reference","previous_headings":"","what":"ct_register_token ‚Äî ct_register_token","title":"ct_register_token ‚Äî ct_register_token","text":"function deprecated. Please use  set_primary_comtrade_key() instead.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_register_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ct_register_token ‚Äî ct_register_token","text":"","code":"ct_register_token(...)"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_register_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ct_register_token ‚Äî ct_register_token","text":"... Used catch possible arguments users supplied function.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_register_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ct_register_token ‚Äî ct_register_token","text":"depreciation error","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_register_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ct_register_token ‚Äî ct_register_token","text":"","code":"if (FALSE) { # interactive() # no examples because only legacy function }"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_search.html","id":null,"dir":"Reference","previous_headings":"","what":"ct_search ‚Äî ct_search","title":"ct_search ‚Äî ct_search","text":"function deprecated Please use  ct_get_data() instead.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ct_search ‚Äî ct_search","text":"","code":"ct_search(...)"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ct_search ‚Äî ct_search","text":"... Used catch possible arguments users supplied function.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ct_search ‚Äî ct_search","text":"depreciation error","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ct_search ‚Äî ct_search","text":"","code":"if (FALSE) { # interactive() # no examples because only legacy function }"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_update_databases.html","id":null,"dir":"Reference","previous_headings":"","what":"ct_update_databases ‚Äî ct_update_databases","title":"ct_update_databases ‚Äî ct_update_databases","text":"function deprecated. Please use  update parameter main ct_get_data function instead.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_update_databases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ct_update_databases ‚Äî ct_update_databases","text":"","code":"ct_update_databases(...)"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_update_databases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ct_update_databases ‚Äî ct_update_databases","text":"... Used catch possible arguments users supplied function.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_update_databases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ct_update_databases ‚Äî ct_update_databases","text":"depreciation error","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_update_databases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ct_update_databases ‚Äî ct_update_databases","text":"","code":"if (FALSE) { # interactive() # no examples because only legacy function }"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_use_pretty_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"ct_use_pretty_cols ‚Äî ct_use_pretty_cols","title":"ct_use_pretty_cols ‚Äî ct_use_pretty_cols","text":"function deprecated. Please use process argument main function instead.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_use_pretty_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ct_use_pretty_cols ‚Äî ct_use_pretty_cols","text":"","code":"ct_use_pretty_cols(...)"},{"path":"https://docs.ropensci.org/comtradr/reference/ct_use_pretty_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ct_use_pretty_cols ‚Äî ct_use_pretty_cols","text":"... Used catch possible arguments users supplied function.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_use_pretty_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ct_use_pretty_cols ‚Äî ct_use_pretty_cols","text":"depreciation error","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/ct_use_pretty_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ct_use_pretty_cols ‚Äî ct_use_pretty_cols","text":"","code":"if (FALSE) { # interactive() # no examples because only legacy function }"},{"path":"https://docs.ropensci.org/comtradr/reference/get_primary_comtrade_key.html","id":null,"dir":"Reference","previous_headings":"","what":"get_primary_comtrade_key ‚Äî get_primary_comtrade_key","title":"get_primary_comtrade_key ‚Äî get_primary_comtrade_key","text":"like Comtrade API key persist sessions, use usethis::edit_r_environ() add env variable COMTRADE_PRIMARY environment file.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/get_primary_comtrade_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_primary_comtrade_key ‚Äî get_primary_comtrade_key","text":"","code":"get_primary_comtrade_key()"},{"path":"https://docs.ropensci.org/comtradr/reference/get_primary_comtrade_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_primary_comtrade_key ‚Äî get_primary_comtrade_key","text":"Gets primary comtrade key environment var COMTRADE_PRIMARY","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/get_primary_comtrade_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_primary_comtrade_key ‚Äî get_primary_comtrade_key","text":"","code":"if (FALSE) { # interactive() ## get API key get_primary_comtrade_key() }"},{"path":"https://docs.ropensci.org/comtradr/reference/set_primary_comtrade_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Set your primary Comtrade API key in the environment variable ‚Äî set_primary_comtrade_key","title":"Set your primary Comtrade API key in the environment variable ‚Äî set_primary_comtrade_key","text":"like Comtrade API key persist sessions, use usethis::edit_r_environ() add env variable COMTRADE_PRIMARY environment file.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/set_primary_comtrade_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set your primary Comtrade API key in the environment variable ‚Äî set_primary_comtrade_key","text":"","code":"set_primary_comtrade_key(key = NULL)"},{"path":"https://docs.ropensci.org/comtradr/reference/set_primary_comtrade_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set your primary Comtrade API key in the environment variable ‚Äî set_primary_comtrade_key","text":"key Provide primary comtrade key","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/set_primary_comtrade_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set your primary Comtrade API key in the environment variable ‚Äî set_primary_comtrade_key","text":"Saves comtrade primary key environment.","code":""},{"path":"https://docs.ropensci.org/comtradr/reference/set_primary_comtrade_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set your primary Comtrade API key in the environment variable ‚Äî set_primary_comtrade_key","text":"","code":"if (FALSE) { # interactive() ## set API key set_primary_comtrade_key(\"xxxxxc678ca4dbxxxxxxxx8285r3\") }"},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"comtradr-0400","dir":"Changelog","previous_headings":"","what":"comtradr 0.4.0.0","title":"comtradr 0.4.0.0","text":"CRAN release: 2024-02-06 comtradr received complete overhaul. Please reference Readme new functions use-cases.","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"new-features-0-4-0-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"comtradr 0.4.0.0","text":"Caching Functionality: Implemented enhanced caching features, added dedicated vignette explaining caching concepts. Environment variables allow configuration caching features. Functionality Updates: Major updates key functions ct_get_data ct_get_ref_table, including parameter adjustments usability improvements, mostly checks important parameters request send .","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"deprecated-in-version-0-4-0-0","dir":"Changelog","previous_headings":"NEW FEATURES","what":"Deprecated in Version 0.4.0","title":"comtradr 0.4.0.0","text":"Deprecated direct alternative. Deprecated, use country_codes dataset country codes. Deprecated, use ct_get_data() alternative. Deprecated, utilize update parameter ct_get_data. Deprecated, replaced process argument main functions. Deprecated, longer relevant due daily call limit enforcement. Deprecated, hourly reset time longer exists. Deprecated, use set_primary_comtrade_key() instead.","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"comtradr-03009000","dir":"Changelog","previous_headings":"","what":"comtradr 0.3.0.09000","title":"comtradr 0.3.0.09000","text":"news yet!","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"comtradr-030","dir":"Changelog","previous_headings":"","what":"comtradr 0.3.0","title":"comtradr 0.3.0","text":"CRAN release: 2022-04-20","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"comtradr 0.3.0","text":"Modifications ct_search() add support commodity code ag6 (#30)","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"comtradr 0.3.0","text":"Function ct_register_token() now checks provided token recognized official API grants ‚Äúpremium‚Äù credentials (#34). Passing API token string ct_register_token() now properly bumps hourly rate limit 10,000 (#21). func ct_search(), passing character vector long-form commodity descriptions arg commod_codes now throw error prior making API call, fail (#24). Update country package data, stay date reporter/partner country table Comtrade using. update file inst/extdata/country_table.rda. (#29). func ct_search(), improve error messaging input country invalid. (#31). func ct_search(), fix bug running queries using SITCrev2 commodity type returning raw HTML (opposed json data). (#27). func ct_country_lookup(), remove NA inputs multi-country lookups (previously NA stringified included pipe-separated regex lookup).","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"comtradr-022","dir":"Changelog","previous_headings":"","what":"comtradr 0.2.2","title":"comtradr 0.2.2","text":"CRAN release: 2018-10-05 Remove unused dependency methods Imports.","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"comtradr-021","dir":"Changelog","previous_headings":"","what":"comtradr 0.2.1","title":"comtradr 0.2.1","text":"CRAN release: 2018-05-05","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"new-features-0-2-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"comtradr 0.2.1","text":"Modifications ct_search() allow pulling monthly data entire year single query (#14) function ct_search(), expanded valid input types args start_date end_date (#10).","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"bug-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"comtradr 0.2.1","text":"ct_search() now supports commodity classifications offered UN Comtrade (#16). updates generated function ct_update_databases() now properly preserved R sessions (#11). Passing \"services\" arg type within function ct_search() now uses commodity classification EB02 default (previously throw error, fixes #6). using commodity classification EB02 within function ct_search(), passing \"TOTAL\" arg commod_codes longer returns zero results (#7). ct_commodity_lookup() longer returns zero results passing caps input arg search_terms (#9).","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"comtradr-010","dir":"Changelog","previous_headings":"","what":"comtradr 0.1.0","title":"comtradr 0.1.0","text":"CRAN release: 2017-10-24","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"pkg-api-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"PKG API CHANGES","title":"comtradr 0.1.0","text":"Eliminated functions ct_commodities_table ct_countries_table. Added new functions ct_update_databases, ct_use_pretty_cols, ct_commodity_db_type, ct_register_token, ct_get_reset_time, ct_get_remaining_hourly_queries. Renamed functions: commodity_lookup now ct_commodity_lookup, country_lookup now ct_country_lookup. commodity country reference tables now saved cached package data, accessed comtradr functions necessary. replaces need functions ct_commodities_table ct_countries_table. Reorder function arguments within function ct_search. Changed function argument names ensure snake_case used throughout package. ct_search now returns data frame, opposed list.","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"minor-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"MINOR CHANGES","title":"comtradr 0.1.0","text":"Added vignette directory, ‚ÄúIntro comtradr‚Äù vignette. API requests now throttled based rate limits imposed UN Comtrade. Added function setting valid API key/token (ct_register_token). Appending API metadata returned data frame attributes (url API call, date-time query, duration query seconds). Added package level man page. Now using native R errors/warnings, opposed nesting API status codes returned list. Imports changes: remove dplyr, add magrittr purrr. Expand improve test coverage via testthat.","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"comtradr 0.1.0","text":"issues related type-safety function commodity_lookup fixed importing purrr using purrr::map place sapply. fixes issue #2 issue #3.","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"comtradr-002-2017-07-03","dir":"Changelog","previous_headings":"","what":"comtradr 0.0.2 (2017-07-03)","title":"comtradr 0.0.2 (2017-07-03)","text":"CRAN release: 2017-07-03","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"new-features-0-0-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"comtradr 0.0.2 (2017-07-03)","text":"commodity_lookup(): Expanded function accept multiple commodities commodity codes (either character vector numeric vector). Also added argument ‚Äúreturn_char‚Äù allows user specify list output char vector output, argument ‚Äúreturn_code‚Äù specifies output commodity descriptions commodity codes.","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"minor-improvements-0-0-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"comtradr 0.0.2 (2017-07-03)","text":"Add unit tests via testthat.","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"comtradr-001-2017-04-06","dir":"Changelog","previous_headings":"","what":"comtradr 0.0.1 (2017-04-06)","title":"comtradr 0.0.1 (2017-04-06)","text":"CRAN release: 2017-04-05","code":""},{"path":"https://docs.ropensci.org/comtradr/news/index.html","id":"new-features-0-0-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"comtradr 0.0.1 (2017-04-06)","text":"released CRAN","code":""}]
